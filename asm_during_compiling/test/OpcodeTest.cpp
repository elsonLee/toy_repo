#include "catch.hpp"
#include "lxasm.h"

#include <iostream>

namespace Catch {
    template <uint8_t... bytes, bool... is_vars, typename... Args>
    struct StringMaker< Bytes<ByteArray<bytes...>, FlagArray<is_vars...>, Args...> > {
        static std::string convert( Bytes<ByteArray<bytes...>, FlagArray<is_vars...>, Args...> const& v ) { 
	return ::Catch::Detail::arrayRangeToString<v.size>(v.data.begin(), v.data.end());
        }
    }; 
}

TEST_CASE("various opcodes", "[opcode]") {

    SECTION("ADD") {
	REQUIRE(ADD(bl, Imm8<0x12>)					 == BYTES(0x80, 0xc3, 0x12));
	REQUIRE(ADD(b_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)   	 == BYTES(0x80, 0x44, 0x6c, 0x7f, 0x12));
	REQUIRE(ADD(bx, Imm8<0x12>)				    	 == BYTES(0x66, 0x83, 0xc3, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)   	 == BYTES(0x66, 0x83, 0x44, 0x6c, 0x7f, 0x12));
	REQUIRE(ADD(bx, Imm16<0x1234>)				    	 == BYTES(0x66, 0x81, 0xc3, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 2_x + Imm8<0x7f>], Imm16<0x1234>)	 == BYTES(0x66, 0x81, 0x44, 0x6c, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(ebx, Imm8<0x12>)					 == BYTES(0x83, 0xc3, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)	 == BYTES(0x83, 0x44, 0x6c, 0x7f, 0x12));
	REQUIRE(ADD(ebx, Imm32<0x12345678>)				 == BYTES(0x81, 0xc3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 2_x + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x44, 0x6c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rbx, Imm8<0x12>)					 == BYTES(0x48, 0x83, 0xc3, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)	 == BYTES(0x48, 0x83, 0x44, 0x6c, 0x7f, 0x12));
	REQUIRE(ADD(rbx, Imm32<0x12345678>)				 == BYTES(0x48, 0x81, 0xc3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 2_x + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x44, 0x6c, 0x7f, 0x78, 0x56, 0x34, 0x12));
    }

    SECTION("CMP") {
    }

    SECTION("INC") {
    }

    SECTION("JE") {
    }

    SECTION("JNE") {
    }

    SECTION("MOV") {
    }

    SECTION("SUB") {
	REQUIRE(SUB(bl, Imm8<0x12>)					 == BYTES(0x80, 0xeb, 0x12));
	REQUIRE(SUB(b_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)   	 == BYTES(0x80, 0x6c, 0x6c, 0x7f, 0x12));
	REQUIRE(SUB(bx, Imm8<0x12>)				    	 == BYTES(0x66, 0x83, 0xeb, 0x12));
	REQUIRE(SUB(w_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)   	 == BYTES(0x66, 0x83, 0x6c, 0x6c, 0x7f, 0x12));
	REQUIRE(SUB(bx, Imm16<0x1234>)				    	 == BYTES(0x66, 0x81, 0xeb, 0x34, 0x12));
	REQUIRE(SUB(w_[rsp + rbp * 2_x + Imm8<0x7f>], Imm16<0x1234>)	 == BYTES(0x66, 0x81, 0x6c, 0x6c, 0x7f, 0x34, 0x12));
	REQUIRE(SUB(ebx, Imm8<0x12>)					 == BYTES(0x83, 0xeb, 0x12));
	REQUIRE(SUB(d_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)	 == BYTES(0x83, 0x6c, 0x6c, 0x7f, 0x12));
	REQUIRE(SUB(ebx, Imm32<0x12345678>)				 == BYTES(0x81, 0xeb, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(SUB(d_[rsp + rbp * 2_x + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x6c, 0x6c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(SUB(rbx, Imm8<0x12>)					 == BYTES(0x48, 0x83, 0xeb, 0x12));
	REQUIRE(SUB(q_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)	 == BYTES(0x48, 0x83, 0x6c, 0x6c, 0x7f, 0x12));
	REQUIRE(SUB(rbx, Imm32<0x12345678>)				 == BYTES(0x48, 0x81, 0xeb, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(SUB(q_[rsp + rbp * 2_x + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x6c, 0x6c, 0x7f, 0x78, 0x56, 0x34, 0x12));
    }

    SECTION("SYSCALL") {
	REQUIRE(SYSCALL() == BYTES(0x0f, 0x05));
    }

    SECTION("XOR") {
#if 0
	XOR(r8,  r8);
	XOR(m8,  r8);
	XOR(r16, r16);
	XOR(m16, r16);
	XOR(r32, r32);
	XOR(m32, r32);
	XOR(r64, r64);
	XOR(m64, r64);

	XOR(r8,  r8);
	XOR(r8,  m8);
	XOR(r16, r16);
	XOR(r16, m16);
	XOR(r32, r32);
	XOR(r32, m32);
	XOR(r64, r64);
	XOR(r64, m64);
#endif
	REQUIRE(XOR(bl, Imm8<0x12>)					 == BYTES(0x80, 0xf3, 0x12));
	REQUIRE(XOR(b_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)   	 == BYTES(0x80, 0x74, 0x6c, 0x7f, 0x12));
	REQUIRE(XOR(bx, Imm8<0x12>)				    	 == BYTES(0x66, 0x83, 0xf3, 0x12));
	REQUIRE(XOR(w_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)   	 == BYTES(0x66, 0x83, 0x74, 0x6c, 0x7f, 0x12));
	REQUIRE(XOR(bx, Imm16<0x1234>)				    	 == BYTES(0x66, 0x81, 0xf3, 0x34, 0x12));
	REQUIRE(XOR(w_[rsp + rbp * 2_x + Imm8<0x7f>], Imm16<0x1234>)	 == BYTES(0x66, 0x81, 0x74, 0x6c, 0x7f, 0x34, 0x12));
	REQUIRE(XOR(ebx, Imm8<0x12>)					 == BYTES(0x83, 0xf3, 0x12));
	REQUIRE(XOR(d_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)	 == BYTES(0x83, 0x74, 0x6c, 0x7f, 0x12));
	REQUIRE(XOR(ebx, Imm32<0x12345678>)				 == BYTES(0x81, 0xf3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(XOR(d_[rsp + rbp * 2_x + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x74, 0x6c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(XOR(rbx, Imm8<0x12>)					 == BYTES(0x48, 0x83, 0xf3, 0x12));
	REQUIRE(XOR(q_[rsp + rbp * 2_x + Imm8<0x7f>], Imm8<0x12>)	 == BYTES(0x48, 0x83, 0x74, 0x6c, 0x7f, 0x12));
	REQUIRE(XOR(rbx, Imm32<0x12345678>)				 == BYTES(0x48, 0x81, 0xf3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(XOR(q_[rsp + rbp * 2_x + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x74, 0x6c, 0x7f, 0x78, 0x56, 0x34, 0x12));
    }
}
