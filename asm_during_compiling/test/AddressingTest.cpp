#include <stdio.h>
#include <cassert>
#include "lxasm.h"

#include "catch.hpp"

#define BYTES(args...) (make_bytes<args>())

TEST_CASE("various memory addressing", "[mem addressing]") {

    SECTION("r8, imm8") {
	REQUIRE(ADD(al, Imm8<0x12>) == BYTES(0x80, 0xc0, 0x12));
	REQUIRE(ADD(cl, Imm8<0x12>) == BYTES(0x80, 0xc1, 0x12));
	REQUIRE(ADD(dl, Imm8<0x12>) == BYTES(0x80, 0xc2, 0x12));
	REQUIRE(ADD(bl, Imm8<0x12>) == BYTES(0x80, 0xc3, 0x12));
	REQUIRE(ADD(ah, Imm8<0x12>) == BYTES(0x80, 0xc4, 0x12));
	REQUIRE(ADD(ch, Imm8<0x12>) == BYTES(0x80, 0xc5, 0x12));
	REQUIRE(ADD(dh, Imm8<0x12>) == BYTES(0x80, 0xc6, 0x12));
	REQUIRE(ADD(bh, Imm8<0x12>) == BYTES(0x80, 0xc7, 0x12));
    }

    SECTION("r16, imm8") {
	REQUIRE(ADD(ax, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc0, 0x12));
	REQUIRE(ADD(cx, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc1, 0x12));
	REQUIRE(ADD(dx, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc2, 0x12));
	REQUIRE(ADD(bx, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc3, 0x12));
	REQUIRE(ADD(sp, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc4, 0x12));
	REQUIRE(ADD(bp, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc5, 0x12));
	REQUIRE(ADD(si, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc6, 0x12));
	REQUIRE(ADD(di, Imm8<0x12>) == BYTES(0x66, 0x83, 0xc7, 0x12));
    }

    SECTION("r16, imm16") {
	REQUIRE(ADD(ax, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc0, 0x34, 0x12));
	REQUIRE(ADD(cx, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc1, 0x34, 0x12));
	REQUIRE(ADD(dx, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc2, 0x34, 0x12));
	REQUIRE(ADD(bx, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc3, 0x34, 0x12));
	REQUIRE(ADD(sp, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc4, 0x34, 0x12));
	REQUIRE(ADD(bp, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc5, 0x34, 0x12));
	REQUIRE(ADD(si, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc6, 0x34, 0x12));
	REQUIRE(ADD(di, Imm16<0x1234>) == BYTES(0x66, 0x81, 0xc7, 0x34, 0x12));
    }

    SECTION("r32, imm8") {
	REQUIRE(ADD(eax, Imm8<0x12>) == BYTES(0x83, 0xc0, 0x12));
	REQUIRE(ADD(ecx, Imm8<0x12>) == BYTES(0x83, 0xc1, 0x12));
	REQUIRE(ADD(edx, Imm8<0x12>) == BYTES(0x83, 0xc2, 0x12));
	REQUIRE(ADD(ebx, Imm8<0x12>) == BYTES(0x83, 0xc3, 0x12));
	REQUIRE(ADD(esp, Imm8<0x12>) == BYTES(0x83, 0xc4, 0x12));
	REQUIRE(ADD(ebp, Imm8<0x12>) == BYTES(0x83, 0xc5, 0x12));
	REQUIRE(ADD(esi, Imm8<0x12>) == BYTES(0x83, 0xc6, 0x12));
	REQUIRE(ADD(edi, Imm8<0x12>) == BYTES(0x83, 0xc7, 0x12));
    }

    SECTION("r32, imm32") {
	REQUIRE(ADD(eax, Imm32<0x12345678>) == BYTES(0x81, 0xc0, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(ecx, Imm32<0x12345678>) == BYTES(0x81, 0xc1, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(edx, Imm32<0x12345678>) == BYTES(0x81, 0xc2, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(ebx, Imm32<0x12345678>) == BYTES(0x81, 0xc3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(esp, Imm32<0x12345678>) == BYTES(0x81, 0xc4, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(ebp, Imm32<0x12345678>) == BYTES(0x81, 0xc5, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(esi, Imm32<0x12345678>) == BYTES(0x81, 0xc6, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(edi, Imm32<0x12345678>) == BYTES(0x81, 0xc7, 0x78, 0x56, 0x34, 0x12));
    }

    SECTION("r64, imm8") {
	REQUIRE(ADD(rax, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc0, 0x12));
	REQUIRE(ADD(rcx, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc1, 0x12));
	REQUIRE(ADD(rdx, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc2, 0x12));
	REQUIRE(ADD(rbx, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc3, 0x12));
	REQUIRE(ADD(rsp, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc4, 0x12));
	REQUIRE(ADD(rbp, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc5, 0x12));
	REQUIRE(ADD(rsi, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc6, 0x12));
	REQUIRE(ADD(rdi, Imm8<0x12>) == BYTES(0x48, 0x83, 0xc7, 0x12));
	REQUIRE(ADD(r8 , Imm8<0x12>) == BYTES(0x49, 0x83, 0xc0, 0x12));
	REQUIRE(ADD(r9 , Imm8<0x12>) == BYTES(0x49, 0x83, 0xc1, 0x12));
	REQUIRE(ADD(r10, Imm8<0x12>) == BYTES(0x49, 0x83, 0xc2, 0x12));
	REQUIRE(ADD(r11, Imm8<0x12>) == BYTES(0x49, 0x83, 0xc3, 0x12));
	REQUIRE(ADD(r12, Imm8<0x12>) == BYTES(0x49, 0x83, 0xc4, 0x12));
	REQUIRE(ADD(r13, Imm8<0x12>) == BYTES(0x49, 0x83, 0xc5, 0x12));
	REQUIRE(ADD(r14, Imm8<0x12>) == BYTES(0x49, 0x83, 0xc6, 0x12));
	REQUIRE(ADD(r15, Imm8<0x12>) == BYTES(0x49, 0x83, 0xc7, 0x12));
    }

    SECTION("r64, imm32") {
	REQUIRE(ADD(rax, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc0, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rcx, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc1, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rdx, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc2, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rbx, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rsp, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc4, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rbp, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc5, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rsi, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc6, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(rdi, Imm32<0x12345678>) == BYTES(0x48, 0x81, 0xc7, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r8 , Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc0, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r9 , Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc1, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r10, Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc2, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r11, Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc3, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r12, Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc4, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r13, Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc5, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r14, Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc6, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(r15, Imm32<0x12345678>) == BYTES(0x49, 0x81, 0xc7, 0x78, 0x56, 0x34, 0x12));
    }

    SECTION("r8, r8") {
	REQUIRE(ADD(al, bh) == BYTES(0x00, 0xf8));
	REQUIRE(ADD(cl, dh) == BYTES(0x00, 0xf1));
	REQUIRE(ADD(dl, ch) == BYTES(0x00, 0xea));
	REQUIRE(ADD(bl, ah) == BYTES(0x00, 0xe3));
	REQUIRE(ADD(ah, bl) == BYTES(0x00, 0xdc));
	REQUIRE(ADD(ch, dl) == BYTES(0x00, 0xd5));
	REQUIRE(ADD(dh, cl) == BYTES(0x00, 0xce));
	REQUIRE(ADD(bh, al) == BYTES(0x00, 0xc7));
    }

    SECTION("r16, r16") {
	REQUIRE(ADD(ax, di) == BYTES(0x66, 0x01, 0xf8));
	REQUIRE(ADD(cx, si) == BYTES(0x66, 0x01, 0xf1));
	REQUIRE(ADD(dx, bp) == BYTES(0x66, 0x01, 0xea));
	REQUIRE(ADD(bx, sp) == BYTES(0x66, 0x01, 0xe3));
	REQUIRE(ADD(sp, bx) == BYTES(0x66, 0x01, 0xdc));
	REQUIRE(ADD(bp, dx) == BYTES(0x66, 0x01, 0xd5));
	REQUIRE(ADD(si, cx) == BYTES(0x66, 0x01, 0xce));
	REQUIRE(ADD(di, ax) == BYTES(0x66, 0x01, 0xc7));
    }

    SECTION("r32, r32") {
	REQUIRE(ADD(eax, edi) == BYTES(0x01, 0xf8));
	REQUIRE(ADD(ecx, esi) == BYTES(0x01, 0xf1));
	REQUIRE(ADD(edx, ebp) == BYTES(0x01, 0xea));
	REQUIRE(ADD(ebx, esp) == BYTES(0x01, 0xe3));
	REQUIRE(ADD(esp, ebx) == BYTES(0x01, 0xdc));
	REQUIRE(ADD(ebp, edx) == BYTES(0x01, 0xd5));
	REQUIRE(ADD(esi, ecx) == BYTES(0x01, 0xce));
	REQUIRE(ADD(edi, eax) == BYTES(0x01, 0xc7));
    }

    SECTION("r64, r64") {
	REQUIRE(ADD(rax, r15) == BYTES(0x4c, 0x01, 0xf8));
	REQUIRE(ADD(rcx, r14) == BYTES(0x4c, 0x01, 0xf1));
	REQUIRE(ADD(rdx, r13) == BYTES(0x4c, 0x01, 0xea));
	REQUIRE(ADD(rbx, r12) == BYTES(0x4c, 0x01, 0xe3));
	REQUIRE(ADD(rsp, r11) == BYTES(0x4c, 0x01, 0xdc));
	REQUIRE(ADD(rbp, r10) == BYTES(0x4c, 0x01, 0xd5));
	REQUIRE(ADD(rsi, r9 ) == BYTES(0x4c, 0x01, 0xce));
	REQUIRE(ADD(rdi, r8 ) == BYTES(0x4c, 0x01, 0xc7));
	REQUIRE(ADD(r8 , rdi) == BYTES(0x49, 0x01, 0xf8));
	REQUIRE(ADD(r9 , rsi) == BYTES(0x49, 0x01, 0xf1));
	REQUIRE(ADD(r10, rbp) == BYTES(0x49, 0x01, 0xea));
	REQUIRE(ADD(r11, rsp) == BYTES(0x49, 0x01, 0xe3));
	REQUIRE(ADD(r12, rbx) == BYTES(0x49, 0x01, 0xdc));
	REQUIRE(ADD(r13, rdx) == BYTES(0x49, 0x01, 0xd5));
	REQUIRE(ADD(r14, rcx) == BYTES(0x49, 0x01, 0xce));
	REQUIRE(ADD(r15, rax) == BYTES(0x49, 0x01, 0xc7));
    }

    SECTION("m8, imm8") {
	REQUIRE(ADD(b_[Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x05, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(b_[eax], Imm8<0x12>) == BYTES(0x67, 0x80, 0x00, 0x12));
	REQUIRE(ADD(b_[esp], Imm8<0x12>) == BYTES(0x67, 0x80, 0x04, 0x24, 0x12));
	REQUIRE(ADD(b_[ebp], Imm8<0x12>) == BYTES(0x67, 0x80, 0x45, 0x00, 0x12));
	REQUIRE(ADD(b_[rax], Imm8<0x12>) == BYTES(0x80, 0x00, 0x12));
	REQUIRE(ADD(b_[rsp], Imm8<0x12>) == BYTES(0x80, 0x04, 0x24, 0x12));
	REQUIRE(ADD(b_[rbp], Imm8<0x12>) == BYTES(0x80, 0x45, 0x00, 0x12));
	REQUIRE(ADD(b_[r8 ], Imm8<0x12>) == BYTES(0x41, 0x80, 0x00, 0x12));
        REQUIRE(ADD(b_[r12], Imm8<0x12>) == BYTES(0x41, 0x80, 0x04, 0x24, 0x12));
        REQUIRE(ADD(b_[r13], Imm8<0x12>) == BYTES(0x41, 0x80, 0x45, 0x00, 0x12));

	REQUIRE(ADD(b_[eax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x40, 0x7f, 0x12));  
        REQUIRE(ADD(b_[esp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x44, 0x24, 0x7f, 0x12));
        REQUIRE(ADD(b_[ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x80, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(b_[rsp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x80, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(b_[rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x80, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(b_[r8  + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x41, 0x80, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(b_[r12 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x41, 0x80, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(b_[r13 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x41, 0x80, 0x45, 0x7f, 0x12));

	REQUIRE(ADD(b_[eax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(b_[esp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(b_[ebp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(b_[rsp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(b_[rbp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[r8  + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x41, 0x80, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(b_[r12 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x41, 0x80, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(b_[r13 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x41, 0x80, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(b_[eax + ecx], Imm8<0x12>) == BYTES(0x67, 0x80, 0x04, 0x08, 0x12)); 
	REQUIRE(ADD(b_[esp + ecx], Imm8<0x12>) == BYTES(0x67, 0x80, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(b_[ebp + ecx], Imm8<0x12>) == BYTES(0x67, 0x80, 0x44, 0x0d, 0x00, 0x12));
	REQUIRE(ADD(b_[rax + rcx], Imm8<0x12>) == BYTES(0x80, 0x04, 0x08, 0x12));
	REQUIRE(ADD(b_[rsp + rcx], Imm8<0x12>) == BYTES(0x80, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(b_[rbp + rcx], Imm8<0x12>) == BYTES(0x80, 0x44, 0x0d, 0x00, 0x12));

	REQUIRE(ADD(b_[eax + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x44, 0x28, 0x7f, 0x12)); 
	REQUIRE(ADD(b_[esp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(b_[ebp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x44, 0x2d, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x80, 0x44, 0x28, 0x7f, 0x12));
	REQUIRE(ADD(b_[rsp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x80, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(b_[rbp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x80, 0x44, 0x2d, 0x7f, 0x12));

	REQUIRE(ADD(b_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(b_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(b_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(b_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(b_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x80, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(b_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x80, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
    }

    SECTION("m16, imm8") {
	REQUIRE(ADD(w_[Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x05, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(w_[eax], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x00, 0x12));
	REQUIRE(ADD(w_[esp], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x04, 0x24, 0x12));
	REQUIRE(ADD(w_[ebp], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x45, 0x00, 0x12));
	REQUIRE(ADD(w_[rax], Imm8<0x12>) == BYTES(0x66, 0x83, 0x00, 0x12));
	REQUIRE(ADD(w_[rsp], Imm8<0x12>) == BYTES(0x66, 0x83, 0x04, 0x24, 0x12));
	REQUIRE(ADD(w_[rbp], Imm8<0x12>) == BYTES(0x66, 0x83, 0x45, 0x00, 0x12));
	REQUIRE(ADD(w_[r8 ], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x00, 0x12));
        REQUIRE(ADD(w_[r12], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x04, 0x24, 0x12));
        REQUIRE(ADD(w_[r13], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x45, 0x00, 0x12));

	REQUIRE(ADD(w_[eax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x40, 0x7f, 0x12));  
        REQUIRE(ADD(w_[esp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x44, 0x24, 0x7f, 0x12));
        REQUIRE(ADD(w_[ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(w_[rsp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(w_[rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(w_[r8  + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(w_[r12 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(w_[r13 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x45, 0x7f, 0x12));

	REQUIRE(ADD(w_[eax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(w_[esp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(w_[ebp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(w_[rsp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(w_[rbp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[r8  + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(w_[r12 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(w_[r13 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x41, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(w_[eax + ecx], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x04, 0x08, 0x12)); 
	REQUIRE(ADD(w_[esp + ecx], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(w_[ebp + ecx], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x44, 0x0d, 0x00, 0x12));
	REQUIRE(ADD(w_[rax + rcx], Imm8<0x12>) == BYTES(0x66, 0x83, 0x04, 0x08, 0x12));
	REQUIRE(ADD(w_[rsp + rcx], Imm8<0x12>) == BYTES(0x66, 0x83, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(w_[rbp + rcx], Imm8<0x12>) == BYTES(0x66, 0x83, 0x44, 0x0d, 0x00, 0x12));

	REQUIRE(ADD(w_[eax + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x44, 0x28, 0x7f, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(w_[ebp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x44, 0x2d, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x44, 0x28, 0x7f, 0x12));
	REQUIRE(ADD(w_[rsp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(w_[rbp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x44, 0x2d, 0x7f, 0x12));

	REQUIRE(ADD(w_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x66, 0x83, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x66, 0x83, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
    }

    SECTION("m16, imm16") {
	REQUIRE(ADD(w_[eax], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x00, 0x34, 0x12));
	REQUIRE(ADD(w_[esp], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x04, 0x24, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x45, 0x00, 0x34, 0x12));
	REQUIRE(ADD(w_[rax], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x00, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x04, 0x24, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x45, 0x00, 0x34, 0x12));
	REQUIRE(ADD(w_[r8 ], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x00, 0x34, 0x12));
        REQUIRE(ADD(w_[r12], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x04, 0x24, 0x34, 0x12));
        REQUIRE(ADD(w_[r13], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x45, 0x00, 0x34, 0x12));

	REQUIRE(ADD(w_[eax + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x40, 0x7f, 0x34, 0x12));  
        REQUIRE(ADD(w_[esp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x44, 0x24, 0x7f, 0x34, 0x12));
        REQUIRE(ADD(w_[ebp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x45, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x40, 0x7f, 0x34, 0x12));  
	REQUIRE(ADD(w_[rsp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x44, 0x24, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x45, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[r8  + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x40, 0x7f, 0x34, 0x12));  
	REQUIRE(ADD(w_[r12 + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x44, 0x24, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[r13 + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x45, 0x7f, 0x34, 0x12));

	REQUIRE(ADD(w_[eax + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));  
        REQUIRE(ADD(w_[esp + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
        REQUIRE(ADD(w_[ebp + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));  
        REQUIRE(ADD(w_[rsp + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
        REQUIRE(ADD(w_[rbp + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[r8  + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));  
        REQUIRE(ADD(w_[r12 + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
        REQUIRE(ADD(w_[r13 + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x41, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));

	REQUIRE(ADD(w_[eax + ecx], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x04, 0x08, 0x34, 0x12)); 
	REQUIRE(ADD(w_[esp + ecx], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x04, 0x0c, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp + ecx], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x44, 0x0d, 0x00, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + rcx], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x04, 0x08, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rcx], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x04, 0x0c, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + rcx], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x44, 0x0d, 0x00, 0x34, 0x12));

	REQUIRE(ADD(w_[eax + ebp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x44, 0x28, 0x7f, 0x34, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x44, 0x2c, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp + ebp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x44, 0x2d, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + rbp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x44, 0x28, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rbp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x44, 0x2c, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + rbp + Imm8<0x7f>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x44, 0x2d, 0x7f, 0x34, 0x12));

	REQUIRE(ADD(w_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12)); 
	REQUIRE(ADD(w_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x67, 0x66, 0x81, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
	REQUIRE(ADD(w_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm16<0x1234>) == BYTES(0x66, 0x81, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x34, 0x12));
    }

    SECTION("m32, imm8") {
	REQUIRE(ADD(d_[Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x05, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(d_[eax], Imm8<0x12>) == BYTES(0x67, 0x83, 0x00, 0x12));
	REQUIRE(ADD(d_[esp], Imm8<0x12>) == BYTES(0x67, 0x83, 0x04, 0x24, 0x12));
	REQUIRE(ADD(d_[ebp], Imm8<0x12>) == BYTES(0x67, 0x83, 0x45, 0x00, 0x12));
	REQUIRE(ADD(d_[rax], Imm8<0x12>) == BYTES(0x83, 0x00, 0x12));
	REQUIRE(ADD(d_[rsp], Imm8<0x12>) == BYTES(0x83, 0x04, 0x24, 0x12));
	REQUIRE(ADD(d_[rbp], Imm8<0x12>) == BYTES(0x83, 0x45, 0x00, 0x12));
	REQUIRE(ADD(d_[r8 ], Imm8<0x12>) == BYTES(0x41, 0x83, 0x00, 0x12));
        REQUIRE(ADD(d_[r12], Imm8<0x12>) == BYTES(0x41, 0x83, 0x04, 0x24, 0x12));
        REQUIRE(ADD(d_[r13], Imm8<0x12>) == BYTES(0x41, 0x83, 0x45, 0x00, 0x12));

	REQUIRE(ADD(d_[eax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x40, 0x7f, 0x12));  
        REQUIRE(ADD(d_[esp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x44, 0x24, 0x7f, 0x12));
        REQUIRE(ADD(d_[ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x83, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(d_[rsp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x83, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(d_[rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x83, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(d_[r8  + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x41, 0x83, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(d_[r12 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x41, 0x83, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(d_[r13 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x41, 0x83, 0x45, 0x7f, 0x12));

	REQUIRE(ADD(d_[eax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(d_[esp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(d_[ebp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(d_[rsp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(d_[rbp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[r8  + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x41, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(d_[r12 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x41, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(d_[r13 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x41, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(d_[eax + ecx], Imm8<0x12>) == BYTES(0x67, 0x83, 0x04, 0x08, 0x12)); 
	REQUIRE(ADD(d_[esp + ecx], Imm8<0x12>) == BYTES(0x67, 0x83, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(d_[ebp + ecx], Imm8<0x12>) == BYTES(0x67, 0x83, 0x44, 0x0d, 0x00, 0x12));
	REQUIRE(ADD(d_[rax + rcx], Imm8<0x12>) == BYTES(0x83, 0x04, 0x08, 0x12));
	REQUIRE(ADD(d_[rsp + rcx], Imm8<0x12>) == BYTES(0x83, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(d_[rbp + rcx], Imm8<0x12>) == BYTES(0x83, 0x44, 0x0d, 0x00, 0x12));

	REQUIRE(ADD(d_[eax + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x44, 0x28, 0x7f, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(d_[ebp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x44, 0x2d, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x83, 0x44, 0x28, 0x7f, 0x12));
	REQUIRE(ADD(d_[rsp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x83, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(d_[rbp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x83, 0x44, 0x2d, 0x7f, 0x12));

	REQUIRE(ADD(d_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x83, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x83, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
    }

    SECTION("m32, imm32") {
	REQUIRE(ADD(d_[eax], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[esp], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x45, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax], Imm32<0x12345678>) == BYTES(0x81, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp], Imm32<0x12345678>) == BYTES(0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp], Imm32<0x12345678>) == BYTES(0x81, 0x45, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[r8 ], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x00, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(d_[r12], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(d_[r13], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x45, 0x00, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(d_[eax + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x40, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(d_[esp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x44, 0x24, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(d_[ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x45, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x40, 0x7f, 0x78, 0x56, 0x34, 0x12));  
	REQUIRE(ADD(d_[rsp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x44, 0x24, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x45, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[r8  + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x40, 0x7f, 0x78, 0x56, 0x34, 0x12));  
	REQUIRE(ADD(d_[r12 + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x44, 0x24, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[r13 + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x45, 0x7f, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(d_[eax + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(d_[esp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(d_[ebp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(d_[rsp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(d_[rbp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[r8  + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(d_[r12 + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(d_[r13 + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x41, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(d_[eax + ecx], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x04, 0x08, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(d_[esp + ecx], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x04, 0x0c, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp + ecx], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x44, 0x0d, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + rcx], Imm32<0x12345678>) == BYTES(0x81, 0x04, 0x08, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rcx], Imm32<0x12345678>) == BYTES(0x81, 0x04, 0x0c, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + rcx], Imm32<0x12345678>) == BYTES(0x81, 0x44, 0x0d, 0x00, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(d_[eax + ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x44, 0x28, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x44, 0x2c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp + ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x44, 0x2d, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x44, 0x28, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x44, 0x2c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x81, 0x44, 0x2d, 0x7f, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(d_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(d_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x81, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(d_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x81, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
    }

    SECTION("m64, imm8") {
	REQUIRE(ADD(q_[Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x05, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(q_[eax], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x00, 0x12));
	REQUIRE(ADD(q_[esp], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x04, 0x24, 0x12));
	REQUIRE(ADD(q_[ebp], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x45, 0x00, 0x12));
	REQUIRE(ADD(q_[rax], Imm8<0x12>) == BYTES(0x48, 0x83, 0x00, 0x12));
	REQUIRE(ADD(q_[rsp], Imm8<0x12>) == BYTES(0x48, 0x83, 0x04, 0x24, 0x12));
	REQUIRE(ADD(q_[rbp], Imm8<0x12>) == BYTES(0x48, 0x83, 0x45, 0x00, 0x12));
	REQUIRE(ADD(q_[r8 ], Imm8<0x12>) == BYTES(0x49, 0x83, 0x00, 0x12));
        REQUIRE(ADD(q_[r12], Imm8<0x12>) == BYTES(0x49, 0x83, 0x04, 0x24, 0x12));
        REQUIRE(ADD(q_[r13], Imm8<0x12>) == BYTES(0x49, 0x83, 0x45, 0x00, 0x12));

	REQUIRE(ADD(q_[eax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x40, 0x7f, 0x12));  
        REQUIRE(ADD(q_[esp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x44, 0x24, 0x7f, 0x12));
        REQUIRE(ADD(q_[ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(q_[rsp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(q_[rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x45, 0x7f, 0x12));
	REQUIRE(ADD(q_[r8  + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x49, 0x83, 0x40, 0x7f, 0x12));  
	REQUIRE(ADD(q_[r12 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x49, 0x83, 0x44, 0x24, 0x7f, 0x12));
	REQUIRE(ADD(q_[r13 + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x49, 0x83, 0x45, 0x7f, 0x12));

	REQUIRE(ADD(q_[eax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(q_[esp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(q_[ebp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(q_[rsp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(q_[rbp + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[r8  + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x49, 0x83, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x12));  
        REQUIRE(ADD(q_[r12 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x49, 0x83, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x12));
        REQUIRE(ADD(q_[r13 + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x49, 0x83, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x12));

	REQUIRE(ADD(q_[eax + ecx], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x04, 0x08, 0x12)); 
	REQUIRE(ADD(q_[esp + ecx], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(q_[ebp + ecx], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x44, 0x0d, 0x00, 0x12));
	REQUIRE(ADD(q_[rax + rcx], Imm8<0x12>) == BYTES(0x48, 0x83, 0x04, 0x08, 0x12));
	REQUIRE(ADD(q_[rsp + rcx], Imm8<0x12>) == BYTES(0x48, 0x83, 0x04, 0x0c, 0x12));
	REQUIRE(ADD(q_[rbp + rcx], Imm8<0x12>) == BYTES(0x48, 0x83, 0x44, 0x0d, 0x00, 0x12));

	REQUIRE(ADD(q_[eax + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x44, 0x28, 0x7f, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(q_[ebp + ebp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x44, 0x2d, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x44, 0x28, 0x7f, 0x12));
	REQUIRE(ADD(q_[rsp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x44, 0x2c, 0x7f, 0x12));
	REQUIRE(ADD(q_[rbp + rbp + Imm8<0x7f>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x44, 0x2d, 0x7f, 0x12));

	REQUIRE(ADD(q_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x67, 0x48, 0x83, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm8<0x12>) == BYTES(0x48, 0x83, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x12));
    }

    SECTION("m64, imm32") {
	REQUIRE(ADD(q_[eax], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[esp], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x45, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x45, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[r8 ], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x00, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(q_[r12], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x04, 0x24, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(q_[r13], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x45, 0x00, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(q_[eax + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x40, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(q_[esp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x44, 0x24, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(q_[ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x45, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x40, 0x7f, 0x78, 0x56, 0x34, 0x12));  
	REQUIRE(ADD(q_[rsp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x44, 0x24, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x45, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[r8  + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x40, 0x7f, 0x78, 0x56, 0x34, 0x12));  
	REQUIRE(ADD(q_[r12 + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x44, 0x24, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[r13 + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x45, 0x7f, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(q_[eax + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(q_[esp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(q_[ebp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(q_[rsp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(q_[rbp + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[r8  + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x80, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));  
        REQUIRE(ADD(q_[r12 + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
        REQUIRE(ADD(q_[r13 + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x49, 0x81, 0x85, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(q_[eax + ecx], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x04, 0x08, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(q_[esp + ecx], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x04, 0x0c, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp + ecx], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x44, 0x0d, 0x00, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + rcx], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x04, 0x08, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rcx], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x04, 0x0c, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + rcx], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x44, 0x0d, 0x00, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(q_[eax + ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x44, 0x28, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x44, 0x2c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp + ebp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x44, 0x2d, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x44, 0x28, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x44, 0x2c, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + rbp + Imm8<0x7f>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x44, 0x2d, 0x7f, 0x78, 0x56, 0x34, 0x12));

	REQUIRE(ADD(q_[eax + ebp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x2c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x2d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[eax + ebp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x6c, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0x6d, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[eax + ebp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0xac, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0xad, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[eax + ebp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12)); 
	REQUIRE(ADD(q_[esp + ebp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x67, 0x48, 0x81, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rax + rbp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0xec, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
	REQUIRE(ADD(q_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], Imm32<0x12345678>) == BYTES(0x48, 0x81, 0x84, 0xed, 0xef, 0xcd, 0xab, 0x7f, 0x78, 0x56, 0x34, 0x12));
    }

    SECTION("m8, r8") {
	REQUIRE(ADD(b_[Imm32<0x7fabcdef>], al) == BYTES(0x00, 0x05, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(b_[eax], al) == BYTES(0x67, 0x00, 0x00));
	REQUIRE(ADD(b_[esp], ah) == BYTES(0x67, 0x00, 0x24, 0x24));
	REQUIRE(ADD(b_[ebp], ch) == BYTES(0x67, 0x00, 0x6d, 0x00));
	REQUIRE(ADD(b_[rax], al) == BYTES(0x00, 0x00));
	REQUIRE(ADD(b_[rsp], ah) == BYTES(0x00, 0x24, 0x24));
	REQUIRE(ADD(b_[rbp], ch) == BYTES(0x00, 0x6d, 0x00));
	REQUIRE(ADD(b_[r8 ], al) == BYTES(0x41, 0x00, 0x00));
        REQUIRE(ADD(b_[r12], al) == BYTES(0x41, 0x00, 0x04, 0x24));
        REQUIRE(ADD(b_[r13], cl) == BYTES(0x41, 0x00, 0x4d, 0x00));

	REQUIRE(ADD(b_[eax + Imm8<0x7f>], al) == BYTES(0x67, 0x00, 0x40, 0x7f));
        REQUIRE(ADD(b_[esp + Imm8<0x7f>], ah) == BYTES(0x67, 0x00, 0x64, 0x24, 0x7f));
        REQUIRE(ADD(b_[ebp + Imm8<0x7f>], ch) == BYTES(0x67, 0x00, 0x6d, 0x7f));
	REQUIRE(ADD(b_[rax + Imm8<0x7f>], al) == BYTES(0x00, 0x40, 0x7f));
	REQUIRE(ADD(b_[rsp + Imm8<0x7f>], ah) == BYTES(0x00, 0x64, 0x24, 0x7f));
	REQUIRE(ADD(b_[rbp + Imm8<0x7f>], ch) == BYTES(0x00, 0x6d, 0x7f));
	REQUIRE(ADD(b_[r8  + Imm8<0x7f>], al) == BYTES(0x41, 0x00, 0x40, 0x7f));
	REQUIRE(ADD(b_[r12 + Imm8<0x7f>], al) == BYTES(0x41, 0x00, 0x44, 0x24, 0x7f));
	REQUIRE(ADD(b_[r13 + Imm8<0x7f>], cl) == BYTES(0x41, 0x00, 0x4d, 0x7f));

	REQUIRE(ADD(b_[eax + Imm32<0x7fabcdef>], al) == BYTES(0x67, 0x00, 0x80, 0xef, 0xcd, 0xab, 0x7f));  
        REQUIRE(ADD(b_[esp + Imm32<0x7fabcdef>], ah) == BYTES(0x67, 0x00, 0xa4, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(b_[ebp + Imm32<0x7fabcdef>], ch) == BYTES(0x67, 0x00, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rax + Imm32<0x7fabcdef>], al) == BYTES(0x00, 0x80, 0xef, 0xcd, 0xab, 0x7f));  
        REQUIRE(ADD(b_[rsp + Imm32<0x7fabcdef>], ah) == BYTES(0x00, 0xa4, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(b_[rbp + Imm32<0x7fabcdef>], ch) == BYTES(0x00, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[r8  + Imm32<0x7fabcdef>], al) == BYTES(0x41, 0x00, 0x80, 0xef, 0xcd, 0xab, 0x7f));  
        REQUIRE(ADD(b_[r12 + Imm32<0x7fabcdef>], al) == BYTES(0x41, 0x00, 0x84, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(b_[r13 + Imm32<0x7fabcdef>], cl) == BYTES(0x41, 0x00, 0x8d, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(b_[eax + ecx], al) == BYTES(0x67, 0x00, 0x04, 0x08));
        REQUIRE(ADD(b_[esp + ecx], ah) == BYTES(0x67, 0x00, 0x24, 0x0c));
        REQUIRE(ADD(b_[ebp + ecx], ch) == BYTES(0x67, 0x00, 0x6c, 0x0d, 0x00));
	REQUIRE(ADD(b_[rax + rcx], al) == BYTES(0x00, 0x04, 0x08));
	REQUIRE(ADD(b_[rsp + rcx], ah) == BYTES(0x00, 0x24, 0x0c));
	REQUIRE(ADD(b_[rbp + rcx], ch) == BYTES(0x00, 0x6c, 0x0d, 0x00));

	REQUIRE(ADD(b_[eax + ebp + Imm8<0x7f>], al) == BYTES(0x67, 0x00, 0x44, 0x28, 0x7f)); 
	REQUIRE(ADD(b_[esp + ebp + Imm8<0x7f>], ah) == BYTES(0x67, 0x00, 0x64, 0x2c, 0x7f));
	REQUIRE(ADD(b_[ebp + ebp + Imm8<0x7f>], ch) == BYTES(0x67, 0x00, 0x6c, 0x2d, 0x7f));
	REQUIRE(ADD(b_[rax + rbp + Imm8<0x7f>], al) == BYTES(0x00, 0x44, 0x28, 0x7f));
	REQUIRE(ADD(b_[rsp + rbp + Imm8<0x7f>], ah) == BYTES(0x00, 0x64, 0x2c, 0x7f));
	REQUIRE(ADD(b_[rbp + rbp + Imm8<0x7f>], ch) == BYTES(0x00, 0x6c, 0x2d, 0x7f));

	REQUIRE(ADD(b_[eax + ebp * 1_x + Imm32<0x7fabcdef>], al) == BYTES(0x67, 0x00, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f)); 
	REQUIRE(ADD(b_[esp + ebp * 1_x + Imm32<0x7fabcdef>], ah) == BYTES(0x67, 0x00, 0xa4, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], ch) == BYTES(0x67, 0x00, 0xac, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rax + rbp * 1_x + Imm32<0x7fabcdef>], al) == BYTES(0x00, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], ah) == BYTES(0x00, 0xa4, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], ch) == BYTES(0x00, 0xac, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[eax + ebp * 2_x + Imm32<0x7fabcdef>], al) == BYTES(0x67, 0x00, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[esp + ebp * 2_x + Imm32<0x7fabcdef>], ah) == BYTES(0x67, 0x00, 0xa4, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], ch) == BYTES(0x67, 0x00, 0xac, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rax + rbp * 2_x + Imm32<0x7fabcdef>], al) == BYTES(0x00, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], ah) == BYTES(0x00, 0xa4, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], ch) == BYTES(0x00, 0xac, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[eax + ebp * 4_x + Imm32<0x7fabcdef>], al) == BYTES(0x67, 0x00, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[esp + ebp * 4_x + Imm32<0x7fabcdef>], ah) == BYTES(0x67, 0x00, 0xa4, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], ch) == BYTES(0x67, 0x00, 0xac, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rax + rbp * 4_x + Imm32<0x7fabcdef>], al) == BYTES(0x00, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], ah) == BYTES(0x00, 0xa4, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], ch) == BYTES(0x00, 0xac, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[eax + ebp * 8_x + Imm32<0x7fabcdef>], al) == BYTES(0x67, 0x00, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[esp + ebp * 8_x + Imm32<0x7fabcdef>], ah) == BYTES(0x67, 0x00, 0xa4, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], ch) == BYTES(0x67, 0x00, 0xac, 0xed, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rax + rbp * 8_x + Imm32<0x7fabcdef>], al) == BYTES(0x00, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], ah) == BYTES(0x00, 0xa4, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(b_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], ch) == BYTES(0x00, 0xac, 0xed, 0xef, 0xcd, 0xab, 0x7f));
    }

    SECTION("m16, r16") {
	REQUIRE(ADD(w_[Imm32<0x7fabcdef>], ax) == BYTES(0x66, 0x01, 0x05, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(w_[eax], ax) == BYTES(0x67, 0x66, 0x01, 0x00));
	REQUIRE(ADD(w_[esp], cx) == BYTES(0x67, 0x66, 0x01, 0x0c, 0x24));
	REQUIRE(ADD(w_[ebp], dx) == BYTES(0x67, 0x66, 0x01, 0x55, 0x00));
	REQUIRE(ADD(w_[rax], bx) == BYTES(0x66, 0x01, 0x18));
	REQUIRE(ADD(w_[rsp], sp) == BYTES(0x66, 0x01, 0x24, 0x24));
	REQUIRE(ADD(w_[rbp], bp) == BYTES(0x66, 0x01, 0x6d, 0x00));
	REQUIRE(ADD(w_[r8 ], si) == BYTES(0x66, 0x41, 0x01, 0x30));
        REQUIRE(ADD(w_[r12], di) == BYTES(0x66, 0x41, 0x01, 0x3c, 0x24));
        REQUIRE(ADD(w_[r13], bp) == BYTES(0x66, 0x41, 0x01, 0x6d, 0x00));

	REQUIRE(ADD(w_[eax + Imm8<0x7f>], ax) == BYTES(0x67, 0x66, 0x01, 0x40, 0x7f));
        REQUIRE(ADD(w_[esp + Imm8<0x7f>], cx) == BYTES(0x67, 0x66, 0x01, 0x4c, 0x24, 0x7f));
        REQUIRE(ADD(w_[ebp + Imm8<0x7f>], dx) == BYTES(0x67, 0x66, 0x01, 0x55, 0x7f));
	REQUIRE(ADD(w_[rax + Imm8<0x7f>], bx) == BYTES(0x66, 0x01, 0x58, 0x7f));
	REQUIRE(ADD(w_[rsp + Imm8<0x7f>], sp) == BYTES(0x66, 0x01, 0x64, 0x24, 0x7f));
	REQUIRE(ADD(w_[rbp + Imm8<0x7f>], bp) == BYTES(0x66, 0x01, 0x6d, 0x7f));
	REQUIRE(ADD(w_[r8  + Imm8<0x7f>], si) == BYTES(0x66, 0x41, 0x01, 0x70, 0x7f));
	REQUIRE(ADD(w_[r12 + Imm8<0x7f>], di) == BYTES(0x66, 0x41, 0x01, 0x7c, 0x24, 0x7f));
	REQUIRE(ADD(w_[r13 + Imm8<0x7f>], bp) == BYTES(0x66, 0x41, 0x01, 0x6d, 0x7f));
	
	REQUIRE(ADD(w_[eax + Imm32<0x7fabcdef>], ax) == BYTES(0x67, 0x66, 0x01, 0x80, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(w_[esp + Imm32<0x7fabcdef>], cx) == BYTES(0x67, 0x66, 0x01, 0x8c, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(w_[ebp + Imm32<0x7fabcdef>], dx) == BYTES(0x67, 0x66, 0x01, 0x95, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rax + Imm32<0x7fabcdef>], bx) == BYTES(0x66, 0x01, 0x98, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(w_[rsp + Imm32<0x7fabcdef>], sp) == BYTES(0x66, 0x01, 0xa4, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(w_[rbp + Imm32<0x7fabcdef>], bp) == BYTES(0x66, 0x01, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[r8  + Imm32<0x7fabcdef>], si) == BYTES(0x66, 0x41, 0x01, 0xb0, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(w_[r12 + Imm32<0x7fabcdef>], di) == BYTES(0x66, 0x41, 0x01, 0xbc, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(w_[r13 + Imm32<0x7fabcdef>], bp) == BYTES(0x66, 0x41, 0x01, 0xad, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(w_[eax + ecx], ax) == BYTES(0x67, 0x66, 0x01, 0x04, 0x08));
        REQUIRE(ADD(w_[esp + ecx], cx) == BYTES(0x67, 0x66, 0x01, 0x0c, 0x0c));
        REQUIRE(ADD(w_[ebp + ecx], dx) == BYTES(0x67, 0x66, 0x01, 0x54, 0x0d, 0x00));
	REQUIRE(ADD(w_[rax + rcx], bx) == BYTES(0x66, 0x01, 0x1c, 0x08));
	REQUIRE(ADD(w_[rsp + rcx], sp) == BYTES(0x66, 0x01, 0x24, 0x0c));
	REQUIRE(ADD(w_[rbp + rcx], bp) == BYTES(0x66, 0x01, 0x6c, 0x0d, 0x00));
	    
	REQUIRE(ADD(w_[eax + ebp + Imm8<0x7f>], ax) == BYTES(0x67, 0x66, 0x01, 0x44, 0x28, 0x7f));
	REQUIRE(ADD(w_[esp + ebp + Imm8<0x7f>], cx) == BYTES(0x67, 0x66, 0x01, 0x4c, 0x2c, 0x7f));
	REQUIRE(ADD(w_[ebp + ebp + Imm8<0x7f>], dx) == BYTES(0x67, 0x66, 0x01, 0x54, 0x2d, 0x7f));
	REQUIRE(ADD(w_[rax + rbp + Imm8<0x7f>], bx) == BYTES(0x66, 0x01, 0x5c, 0x28, 0x7f));
	REQUIRE(ADD(w_[rsp + rbp + Imm8<0x7f>], sp) == BYTES(0x66, 0x01, 0x64, 0x2c, 0x7f));
	REQUIRE(ADD(w_[rbp + rbp + Imm8<0x7f>], bp) == BYTES(0x66, 0x01, 0x6c, 0x2d, 0x7f));

	REQUIRE(ADD(w_[eax + ebp * 1_x + Imm32<0x7fabcdef>], ax) == BYTES(0x67, 0x66, 0x01, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[esp + ebp * 1_x + Imm32<0x7fabcdef>], cx) == BYTES(0x67, 0x66, 0x01, 0x8c, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], dx) == BYTES(0x67, 0x66, 0x01, 0x94, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rax + rbp * 1_x + Imm32<0x7fabcdef>], bx) == BYTES(0x66, 0x01, 0x9c, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], sp) == BYTES(0x66, 0x01, 0xa4, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], bp) == BYTES(0x66, 0x01, 0xac, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[eax + ebp * 2_x + Imm32<0x7fabcdef>], ax) == BYTES(0x67, 0x66, 0x01, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[esp + ebp * 2_x + Imm32<0x7fabcdef>], cx) == BYTES(0x67, 0x66, 0x01, 0x8c, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], dx) == BYTES(0x67, 0x66, 0x01, 0x94, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rax + rbp * 2_x + Imm32<0x7fabcdef>], bx) == BYTES(0x66, 0x01, 0x9c, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], sp) == BYTES(0x66, 0x01, 0xa4, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], bp) == BYTES(0x66, 0x01, 0xac, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[eax + ebp * 4_x + Imm32<0x7fabcdef>], ax) == BYTES(0x67, 0x66, 0x01, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[esp + ebp * 4_x + Imm32<0x7fabcdef>], cx) == BYTES(0x67, 0x66, 0x01, 0x8c, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], dx) == BYTES(0x67, 0x66, 0x01, 0x94, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rax + rbp * 4_x + Imm32<0x7fabcdef>], bx) == BYTES(0x66, 0x01, 0x9c, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], sp) == BYTES(0x66, 0x01, 0xa4, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], bp) == BYTES(0x66, 0x01, 0xac, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[eax + ebp * 8_x + Imm32<0x7fabcdef>], ax) == BYTES(0x67, 0x66, 0x01, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[esp + ebp * 8_x + Imm32<0x7fabcdef>], cx) == BYTES(0x67, 0x66, 0x01, 0x8c, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], dx) == BYTES(0x67, 0x66, 0x01, 0x94, 0xed, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rax + rbp * 8_x + Imm32<0x7fabcdef>], bx) == BYTES(0x66, 0x01, 0x9c, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], sp) == BYTES(0x66, 0x01, 0xa4, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(w_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], bp) == BYTES(0x66, 0x01, 0xac, 0xed, 0xef, 0xcd, 0xab, 0x7f));
    }

    SECTION("m32, r32") {
	REQUIRE(ADD(d_[Imm32<0x7fabcdef>], eax) == BYTES(0x01, 0x05, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(d_[eax], eax) == BYTES(0x67, 0x01, 0x00));
	REQUIRE(ADD(d_[esp], ecx) == BYTES(0x67, 0x01, 0x0c, 0x24));
	REQUIRE(ADD(d_[ebp], edx) == BYTES(0x67, 0x01, 0x55, 0x00));
	REQUIRE(ADD(d_[rax], ebx) == BYTES(0x01, 0x18));
	REQUIRE(ADD(d_[rsp], esp) == BYTES(0x01, 0x24, 0x24));
	REQUIRE(ADD(d_[rbp], ebp) == BYTES(0x01, 0x6d, 0x00));
	REQUIRE(ADD(d_[r8 ], esi) == BYTES(0x41, 0x01, 0x30));
        REQUIRE(ADD(d_[r12], edi) == BYTES(0x41, 0x01, 0x3c, 0x24));
        REQUIRE(ADD(d_[r13], ebp) == BYTES(0x41, 0x01, 0x6d, 0x00));

	REQUIRE(ADD(d_[eax + Imm8<0x7f>], eax) == BYTES(0x67, 0x01, 0x40, 0x7f));
        REQUIRE(ADD(d_[esp + Imm8<0x7f>], ecx) == BYTES(0x67, 0x01, 0x4c, 0x24, 0x7f));
        REQUIRE(ADD(d_[ebp + Imm8<0x7f>], edx) == BYTES(0x67, 0x01, 0x55, 0x7f));
	REQUIRE(ADD(d_[rax + Imm8<0x7f>], ebx) == BYTES(0x01, 0x58, 0x7f));
	REQUIRE(ADD(d_[rsp + Imm8<0x7f>], esp) == BYTES(0x01, 0x64, 0x24, 0x7f));
	REQUIRE(ADD(d_[rbp + Imm8<0x7f>], ebp) == BYTES(0x01, 0x6d, 0x7f));
	REQUIRE(ADD(d_[r8  + Imm8<0x7f>], esi) == BYTES(0x41, 0x01, 0x70, 0x7f));
	REQUIRE(ADD(d_[r12 + Imm8<0x7f>], edi) == BYTES(0x41, 0x01, 0x7c, 0x24, 0x7f));
	REQUIRE(ADD(d_[r13 + Imm8<0x7f>], ebp) == BYTES(0x41, 0x01, 0x6d, 0x7f));
	
	REQUIRE(ADD(d_[eax + Imm32<0x7fabcdef>], eax) == BYTES(0x67, 0x01, 0x80, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(d_[esp + Imm32<0x7fabcdef>], ecx) == BYTES(0x67, 0x01, 0x8c, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(d_[ebp + Imm32<0x7fabcdef>], edx) == BYTES(0x67, 0x01, 0x95, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rax + Imm32<0x7fabcdef>], ebx) == BYTES(0x01, 0x98, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(d_[rsp + Imm32<0x7fabcdef>], esp) == BYTES(0x01, 0xa4, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(d_[rbp + Imm32<0x7fabcdef>], ebp) == BYTES(0x01, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[r8  + Imm32<0x7fabcdef>], esi) == BYTES(0x41, 0x01, 0xb0, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(d_[r12 + Imm32<0x7fabcdef>], edi) == BYTES(0x41, 0x01, 0xbc, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(d_[r13 + Imm32<0x7fabcdef>], ebp) == BYTES(0x41, 0x01, 0xad, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(d_[eax + ecx], eax) == BYTES(0x67, 0x01, 0x04, 0x08));
        REQUIRE(ADD(d_[esp + ecx], ecx) == BYTES(0x67, 0x01, 0x0c, 0x0c));
        REQUIRE(ADD(d_[ebp + ecx], edx) == BYTES(0x67, 0x01, 0x54, 0x0d, 0x00));
	REQUIRE(ADD(d_[rax + rcx], ebx) == BYTES(0x01, 0x1c, 0x08));
	REQUIRE(ADD(d_[rsp + rcx], esp) == BYTES(0x01, 0x24, 0x0c));
	REQUIRE(ADD(d_[rbp + rcx], ebp) == BYTES(0x01, 0x6c, 0x0d, 0x00));
	    
	REQUIRE(ADD(d_[eax + ebp + Imm8<0x7f>], eax) == BYTES(0x67, 0x01, 0x44, 0x28, 0x7f));
	REQUIRE(ADD(d_[esp + ebp + Imm8<0x7f>], ecx) == BYTES(0x67, 0x01, 0x4c, 0x2c, 0x7f));
	REQUIRE(ADD(d_[ebp + ebp + Imm8<0x7f>], edx) == BYTES(0x67, 0x01, 0x54, 0x2d, 0x7f));
	REQUIRE(ADD(d_[rax + rbp + Imm8<0x7f>], ebx) == BYTES(0x01, 0x5c, 0x28, 0x7f));
	REQUIRE(ADD(d_[rsp + rbp + Imm8<0x7f>], esp) == BYTES(0x01, 0x64, 0x2c, 0x7f));
	REQUIRE(ADD(d_[rbp + rbp + Imm8<0x7f>], ebp) == BYTES(0x01, 0x6c, 0x2d, 0x7f));

	REQUIRE(ADD(d_[eax + ebp * 1_x + Imm32<0x7fabcdef>], eax) == BYTES(0x67, 0x01, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[esp + ebp * 1_x + Imm32<0x7fabcdef>], ecx) == BYTES(0x67, 0x01, 0x8c, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], edx) == BYTES(0x67, 0x01, 0x94, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rax + rbp * 1_x + Imm32<0x7fabcdef>], ebx) == BYTES(0x01, 0x9c, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], esp) == BYTES(0x01, 0xa4, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], ebp) == BYTES(0x01, 0xac, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[eax + ebp * 2_x + Imm32<0x7fabcdef>], eax) == BYTES(0x67, 0x01, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[esp + ebp * 2_x + Imm32<0x7fabcdef>], ecx) == BYTES(0x67, 0x01, 0x8c, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], edx) == BYTES(0x67, 0x01, 0x94, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rax + rbp * 2_x + Imm32<0x7fabcdef>], ebx) == BYTES(0x01, 0x9c, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], esp) == BYTES(0x01, 0xa4, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], ebp) == BYTES(0x01, 0xac, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[eax + ebp * 4_x + Imm32<0x7fabcdef>], eax) == BYTES(0x67, 0x01, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[esp + ebp * 4_x + Imm32<0x7fabcdef>], ecx) == BYTES(0x67, 0x01, 0x8c, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], edx) == BYTES(0x67, 0x01, 0x94, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rax + rbp * 4_x + Imm32<0x7fabcdef>], ebx) == BYTES(0x01, 0x9c, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], esp) == BYTES(0x01, 0xa4, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], ebp) == BYTES(0x01, 0xac, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[eax + ebp * 8_x + Imm32<0x7fabcdef>], eax) == BYTES(0x67, 0x01, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[esp + ebp * 8_x + Imm32<0x7fabcdef>], ecx) == BYTES(0x67, 0x01, 0x8c, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], edx) == BYTES(0x67, 0x01, 0x94, 0xed, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rax + rbp * 8_x + Imm32<0x7fabcdef>], ebx) == BYTES(0x01, 0x9c, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], esp) == BYTES(0x01, 0xa4, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(d_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], ebp) == BYTES(0x01, 0xac, 0xed, 0xef, 0xcd, 0xab, 0x7f));
    }

    SECTION("m64, r64") {
	REQUIRE(ADD(q_[Imm32<0x7fabcdef>], rax) == BYTES(0x48, 0x01, 0x05, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(q_[eax], rax) == BYTES(0x67, 0x48, 0x01, 0x00));
	REQUIRE(ADD(q_[esp], rcx) == BYTES(0x67, 0x48, 0x01, 0x0c, 0x24));
	REQUIRE(ADD(q_[ebp], rdx) == BYTES(0x67, 0x48, 0x01, 0x55, 0x00));
	REQUIRE(ADD(q_[rax], rbx) == BYTES(0x48, 0x01, 0x18));
	REQUIRE(ADD(q_[rsp], rsp) == BYTES(0x48, 0x01, 0x24, 0x24));
	REQUIRE(ADD(q_[rbp], rbp) == BYTES(0x48, 0x01, 0x6d, 0x00));
	REQUIRE(ADD(q_[r8 ], rsi) == BYTES(0x49, 0x01, 0x30));
        REQUIRE(ADD(q_[r12], rdi) == BYTES(0x49, 0x01, 0x3c, 0x24));
        REQUIRE(ADD(q_[r13], rbp) == BYTES(0x49, 0x01, 0x6d, 0x00));

	REQUIRE(ADD(q_[eax + Imm8<0x7f>], rax) == BYTES(0x67, 0x48, 0x01, 0x40, 0x7f));
        REQUIRE(ADD(q_[esp + Imm8<0x7f>], rcx) == BYTES(0x67, 0x48, 0x01, 0x4c, 0x24, 0x7f));
        REQUIRE(ADD(q_[ebp + Imm8<0x7f>], rdx) == BYTES(0x67, 0x48, 0x01, 0x55, 0x7f));
	REQUIRE(ADD(q_[rax + Imm8<0x7f>], rbx) == BYTES(0x48, 0x01, 0x58, 0x7f));
	REQUIRE(ADD(q_[rsp + Imm8<0x7f>], rsp) == BYTES(0x48, 0x01, 0x64, 0x24, 0x7f));
	REQUIRE(ADD(q_[rbp + Imm8<0x7f>], rbp) == BYTES(0x48, 0x01, 0x6d, 0x7f));
	REQUIRE(ADD(q_[r8  + Imm8<0x7f>], rsi) == BYTES(0x49, 0x01, 0x70, 0x7f));
	REQUIRE(ADD(q_[r12 + Imm8<0x7f>], rdi) == BYTES(0x49, 0x01, 0x7c, 0x24, 0x7f));
	REQUIRE(ADD(q_[r13 + Imm8<0x7f>], rbp) == BYTES(0x49, 0x01, 0x6d, 0x7f));
	
	REQUIRE(ADD(q_[eax + Imm32<0x7fabcdef>], rax) == BYTES(0x67, 0x48, 0x01, 0x80, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(q_[esp + Imm32<0x7fabcdef>], rcx) == BYTES(0x67, 0x48, 0x01, 0x8c, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(q_[ebp + Imm32<0x7fabcdef>], rdx) == BYTES(0x67, 0x48, 0x01, 0x95, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rax + Imm32<0x7fabcdef>], rbx) == BYTES(0x48, 0x01, 0x98, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(q_[rsp + Imm32<0x7fabcdef>], rsp) == BYTES(0x48, 0x01, 0xa4, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(q_[rbp + Imm32<0x7fabcdef>], rbp) == BYTES(0x48, 0x01, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[r8  + Imm32<0x7fabcdef>], rsi) == BYTES(0x49, 0x01, 0xb0, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(q_[r12 + Imm32<0x7fabcdef>], rdi) == BYTES(0x49, 0x01, 0xbc, 0x24, 0xef, 0xcd, 0xab, 0x7f));
        REQUIRE(ADD(q_[r13 + Imm32<0x7fabcdef>], rbp) == BYTES(0x49, 0x01, 0xad, 0xef, 0xcd, 0xab, 0x7f));

	REQUIRE(ADD(q_[eax + ecx], rax) == BYTES(0x67, 0x48, 0x01, 0x04, 0x08));
        REQUIRE(ADD(q_[esp + ecx], rcx) == BYTES(0x67, 0x48, 0x01, 0x0c, 0x0c));
        REQUIRE(ADD(q_[ebp + ecx], rdx) == BYTES(0x67, 0x48, 0x01, 0x54, 0x0d, 0x00));
	REQUIRE(ADD(q_[rax + rcx], rbx) == BYTES(0x48, 0x01, 0x1c, 0x08));
	REQUIRE(ADD(q_[rsp + rcx], rsp) == BYTES(0x48, 0x01, 0x24, 0x0c));
	REQUIRE(ADD(q_[rbp + rcx], rbp) == BYTES(0x48, 0x01, 0x6c, 0x0d, 0x00));
	    
	REQUIRE(ADD(q_[eax + ebp + Imm8<0x7f>], rax) == BYTES(0x67, 0x48, 0x01, 0x44, 0x28, 0x7f));
	REQUIRE(ADD(q_[esp + ebp + Imm8<0x7f>], rcx) == BYTES(0x67, 0x48, 0x01, 0x4c, 0x2c, 0x7f));
	REQUIRE(ADD(q_[ebp + ebp + Imm8<0x7f>], rdx) == BYTES(0x67, 0x48, 0x01, 0x54, 0x2d, 0x7f));
	REQUIRE(ADD(q_[rax + rbp + Imm8<0x7f>], rbx) == BYTES(0x48, 0x01, 0x5c, 0x28, 0x7f));
	REQUIRE(ADD(q_[rsp + rbp + Imm8<0x7f>], rsp) == BYTES(0x48, 0x01, 0x64, 0x2c, 0x7f));
	REQUIRE(ADD(q_[rbp + rbp + Imm8<0x7f>], rbp) == BYTES(0x48, 0x01, 0x6c, 0x2d, 0x7f));

	REQUIRE(ADD(q_[eax + ebp * 1_x + Imm32<0x7fabcdef>], rax) == BYTES(0x67, 0x48, 0x01, 0x84, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[esp + ebp * 1_x + Imm32<0x7fabcdef>], rcx) == BYTES(0x67, 0x48, 0x01, 0x8c, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[ebp + ebp * 1_x + Imm32<0x7fabcdef>], rdx) == BYTES(0x67, 0x48, 0x01, 0x94, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rax + rbp * 1_x + Imm32<0x7fabcdef>], rbx) == BYTES(0x48, 0x01, 0x9c, 0x28, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rsp + rbp * 1_x + Imm32<0x7fabcdef>], rsp) == BYTES(0x48, 0x01, 0xa4, 0x2c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rbp + rbp * 1_x + Imm32<0x7fabcdef>], rbp) == BYTES(0x48, 0x01, 0xac, 0x2d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[eax + ebp * 2_x + Imm32<0x7fabcdef>], rax) == BYTES(0x67, 0x48, 0x01, 0x84, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[esp + ebp * 2_x + Imm32<0x7fabcdef>], rcx) == BYTES(0x67, 0x48, 0x01, 0x8c, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[ebp + ebp * 2_x + Imm32<0x7fabcdef>], rdx) == BYTES(0x67, 0x48, 0x01, 0x94, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rax + rbp * 2_x + Imm32<0x7fabcdef>], rbx) == BYTES(0x48, 0x01, 0x9c, 0x68, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rsp + rbp * 2_x + Imm32<0x7fabcdef>], rsp) == BYTES(0x48, 0x01, 0xa4, 0x6c, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rbp + rbp * 2_x + Imm32<0x7fabcdef>], rbp) == BYTES(0x48, 0x01, 0xac, 0x6d, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[eax + ebp * 4_x + Imm32<0x7fabcdef>], rax) == BYTES(0x67, 0x48, 0x01, 0x84, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[esp + ebp * 4_x + Imm32<0x7fabcdef>], rcx) == BYTES(0x67, 0x48, 0x01, 0x8c, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[ebp + ebp * 4_x + Imm32<0x7fabcdef>], rdx) == BYTES(0x67, 0x48, 0x01, 0x94, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rax + rbp * 4_x + Imm32<0x7fabcdef>], rbx) == BYTES(0x48, 0x01, 0x9c, 0xa8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rsp + rbp * 4_x + Imm32<0x7fabcdef>], rsp) == BYTES(0x48, 0x01, 0xa4, 0xac, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rbp + rbp * 4_x + Imm32<0x7fabcdef>], rbp) == BYTES(0x48, 0x01, 0xac, 0xad, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[eax + ebp * 8_x + Imm32<0x7fabcdef>], rax) == BYTES(0x67, 0x48, 0x01, 0x84, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[esp + ebp * 8_x + Imm32<0x7fabcdef>], rcx) == BYTES(0x67, 0x48, 0x01, 0x8c, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[ebp + ebp * 8_x + Imm32<0x7fabcdef>], rdx) == BYTES(0x67, 0x48, 0x01, 0x94, 0xed, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rax + rbp * 8_x + Imm32<0x7fabcdef>], rbx) == BYTES(0x48, 0x01, 0x9c, 0xe8, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rsp + rbp * 8_x + Imm32<0x7fabcdef>], rsp) == BYTES(0x48, 0x01, 0xa4, 0xec, 0xef, 0xcd, 0xab, 0x7f));
	REQUIRE(ADD(q_[rbp + rbp * 8_x + Imm32<0x7fabcdef>], rbp) == BYTES(0x48, 0x01, 0xac, 0xed, 0xef, 0xcd, 0xab, 0x7f));
    }
}



